{"ast":null,"code":"var _jsxFileName = \"D:\\\\ReactProjects\\\\Math-calculator\\\\math-calculator\\\\src\\\\sellami_components\\\\Inputs\\\\MatrixEntry.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction MatrixEntry(_ref) {\n  _s();\n  var _this = this;\n  let {\n    sizeX,\n    sizeY,\n    HandleMatrixChange\n  } = _ref;\n  let matrix = Array(sizeY).fill(0).map(row => new Array(sizeX).fill(0));\n  const [screenSize, setScreenSize] = useState(getCurrentDimension());\n  const [ins, setIns] = useState(15);\n  function getCurrentDimension() {\n    return {\n      width: window.innerWidth,\n      height: window.innerHeight\n    };\n  }\n  useEffect(() => {\n    const updateDimension = () => {\n      setScreenSize(getCurrentDimension());\n    };\n    window.addEventListener('resize', updateDimension);\n    if (screenSize.width < 960) {\n      setIns(30);\n    } else {\n      setIns(15);\n    }\n    return () => {\n      window.removeEventListener('resize', updateDimension);\n    };\n  }, [screenSize]);\n\n  // const input_size = 50\n\n  console.log(sizeY);\n  return (\n    /*#__PURE__*/\n    // <div className='d-flex justify-content-center MinputCont' style={{\"width\":((32*ins) - sizeY*ins) +\"vw\"}}>\n    _jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center MinputCont\",\n      style: {\n        \"width\": \"100%\"\n      },\n      children: matrix.map(function (row) {\n        let indexRow = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n        return (\n          /*#__PURE__*/\n          // <div className='d-flex flex-wrap justify-content-center'  key={indexRow} style={{ \"width\": ins + \"%\" ,\"minWidth\":\"25px\"}} >\n          _jsxDEV(\"div\", {\n            className: \"d-flex flex-wrap justify-content-center\",\n            style: {\n              \"width\": screenSize.width < 500 ? 100 / sizeY + \"%\" : ins + \"%\"\n            },\n            children: row.map(function (item) {\n              let indexColumn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n              return /*#__PURE__*/_jsxDEV(\"input\", {\n                defaultValue: 0,\n                type: \"text\",\n                name: indexRow + \",\" + indexColumn,\n                onKeyPress: event => {\n                  // console.log(event.target.value)\n                  if (!/[0-9]/.test(event.key) && event.key !== '+' && event.key !== \"-\") {\n                    if (event.key === \".\") {\n                      if (event.target.value[0] === \".\" || event.target.value === \"\") {\n                        event.preventDefault();\n                      }\n                      if ((event.target.value.match(/\\./g) || []).length >= 2) {\n                        event.preventDefault();\n                      }\n                    } else {\n                      event.preventDefault();\n                    }\n                  }\n                },\n                onInput: event => {\n                  if (event.target.value !== '') {\n                    event.target.value = event.target.value[0] + event.target.value.substring(1).replace('+', '').replace('-', '');\n                    let [indexY, indexX] = event.target.name.split(\",\");\n                    // matrix[Number(indexX)][Number(indexY)] = Number(event.target.value)\n                    // console.log(\"done\")\n                    HandleMatrixChange(indexX, indexY, Number(event.target.value));\n                  }\n                },\n                onBlur: event => {\n                  if (event.target.value === '-' || event.target.value === '+' || event.target.value === '') {\n                    event.target.value = 0;\n                    let [indexY, indexX] = event.target.name.split(\",\");\n                    HandleMatrixChange(indexX, indexY, 0);\n                  }\n                },\n                className: \"m-1 Matrix_Input\",\n                style: {\n                  \"width\": \"100%\"\n                }\n              }, indexRow + \" \" + indexColumn, false, {\n                fileName: _jsxFileName,\n                lineNumber: 46,\n                columnNumber: 21\n              }, _this);\n            })\n          }, indexRow, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 13\n          }, _this)\n        );\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this)\n  );\n}\n_s(MatrixEntry, \"zNLHjrhwjJ+ExlQBr4vzeWmmEtc=\");\n_c = MatrixEntry;\nexport default MatrixEntry;\nvar _c;\n$RefreshReg$(_c, \"MatrixEntry\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","MatrixEntry","_ref","_s","_this","sizeX","sizeY","HandleMatrixChange","matrix","Array","fill","map","row","screenSize","setScreenSize","getCurrentDimension","ins","setIns","width","window","innerWidth","height","innerHeight","updateDimension","addEventListener","removeEventListener","console","log","className","style","children","indexRow","arguments","length","undefined","item","indexColumn","defaultValue","type","name","onKeyPress","event","test","key","target","value","preventDefault","match","onInput","substring","replace","indexY","indexX","split","Number","onBlur","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/ReactProjects/Math-calculator/math-calculator/src/sellami_components/Inputs/MatrixEntry.jsx"],"sourcesContent":["import React,{useState,useEffect} from 'react'\r\n\r\n\r\nfunction MatrixEntry ({sizeX , sizeY, HandleMatrixChange}){\r\n    let matrix = Array(sizeY).fill(0).map(row => new Array(sizeX).fill(0))\r\n    const [screenSize, setScreenSize] = useState(getCurrentDimension());\r\n    const [ins,setIns] = useState(15)\r\n  \tfunction getCurrentDimension(){\r\n    \treturn {\r\n      \t\twidth: window.innerWidth,\r\n      \t\theight: window.innerHeight\r\n    \t}\r\n  \t}\r\n\r\n    useEffect(() => {\r\n      const updateDimension = () => {\r\n          setScreenSize(getCurrentDimension())\r\n      }\r\n      window.addEventListener('resize', updateDimension);\r\n      if(screenSize.width <960){\r\n        setIns(30)\r\n      }else{\r\n        setIns(15)\r\n      }\r\n  \r\n      return(() => {\r\n          window.removeEventListener('resize', updateDimension);\r\n      })\r\n  }, [screenSize])\r\n    \r\n    // const input_size = 50\r\n    \r\n    console.log(sizeY)\r\n  return (\r\n    // <div className='d-flex justify-content-center MinputCont' style={{\"width\":((32*ins) - sizeY*ins) +\"vw\"}}>\r\n    <div className='d-flex justify-content-center MinputCont' style={{\"width\":\"100%\"}}>\r\n        {matrix.map((row, indexRow = 1) => {\r\n          return (\r\n            // <div className='d-flex flex-wrap justify-content-center'  key={indexRow} style={{ \"width\": ins + \"%\" ,\"minWidth\":\"25px\"}} >\r\n            <div className='d-flex flex-wrap justify-content-center'  key={indexRow} style={{ \"width\":\r\n            screenSize.width<500?(100/sizeY)+\"%\":ins + \"%\" \r\n             \r\n             }} >\r\n              {row.map((item, indexColumn = 1) => {\r\n                return (\r\n                    <input\r\n                      key={indexRow + \" \" + indexColumn}\r\n                      defaultValue={0}\r\n                      type='text'\r\n                      name={indexRow + \",\" + indexColumn}\r\n                      onKeyPress={(event) => {\r\n                        // console.log(event.target.value)\r\n                        if ((!/[0-9]/.test(event.key))&&(event.key !== '+') && (event.key !== \"-\")) {\r\n                          if(event.key === \".\"){\r\n                            if(event.target.value[0] === \".\" || event.target.value === \"\"){\r\n                              event.preventDefault();\r\n                            }\r\n                            if((event.target.value.match(/\\./g) || []).length >= 2){\r\n                              event.preventDefault();\r\n                            }\r\n                          }else{\r\n                            event.preventDefault();\r\n                          }\r\n                        }\r\n                      }}\r\n                      onInput={(event)=>{\r\n                        if(event.target.value !== ''){\r\n                          \r\n                          event.target.value = event.target.value[0] + event.target.value.substring(1).replace('+','').replace('-','')\r\n                          let [indexY,indexX] = event.target.name.split(\",\")\r\n                          // matrix[Number(indexX)][Number(indexY)] = Number(event.target.value)\r\n                          // console.log(\"done\")\r\n                          HandleMatrixChange(indexX,indexY,Number(event.target.value));\r\n                        }\r\n                          \r\n                      }}\r\n                      onBlur={(event)=>{\r\n                        \r\n                        if((event.target.value === '-' ) || (event.target.value === '+' ) || (event.target.value === '')){\r\n                          event.target.value = 0\r\n                          let [indexY,indexX] = event.target.name.split(\",\")\r\n                          HandleMatrixChange(indexX,indexY,0);\r\n                        }\r\n                        \r\n                      }}\r\n                      className='m-1 Matrix_Input'\r\n                      style={{ \"width\":  \"100%\" }}/>\r\n                )\r\n              })}\r\n            </div>\r\n          )\r\n        })}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MatrixEntry"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}