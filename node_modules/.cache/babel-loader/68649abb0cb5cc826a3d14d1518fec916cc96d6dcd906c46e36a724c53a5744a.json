{"ast":null,"code":"export default class Testing_Methods {\n  static Diagonizable(content) {\n    return fetch(`https://easy-algebra-backend.onrender.com/Diagonizable`, {\n      'method': 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(content)\n    }).then(response => response.json()).catch(error => console.log(error));\n  }\n  static Convexity(content) {\n    return fetch(`https://easy-algebra-backend.onrender.com/Convexity`, {\n      'method': 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(content)\n    }).then(response => response.json()).catch(error => console.log(error));\n  }\n  static Invertibility(content) {\n    return fetch(`https://easy-algebra-backend.onrender.com/Invertibility`, {\n      'method': 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(content)\n    }).then(response => response.json()).catch(error => console.log(error));\n  }\n  static Orthogonality(content) {\n    return fetch(`https://easy-algebra-backend.onrender.com/Orthogonality`, {\n      'method': 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(content)\n    }).then(response => response.json()).catch(error => console.log(error));\n  }\n  static Independency(content) {\n    return fetch(`https://easy-algebra-backend.onrender.com/Independency`, {\n      'method': 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(content)\n    }).then(response => response.json()).catch(error => console.log(error));\n  }\n}","map":{"version":3,"names":["Testing_Methods","Diagonizable","content","fetch","headers","body","JSON","stringify","then","response","json","catch","error","console","log","Convexity","Invertibility","Orthogonality","Independency"],"sources":["D:/ReactProjects/Hackathon_Project/main/src/sellami_components/api/Testing_Methods.js"],"sourcesContent":["export default class Testing_Methods {\r\n    static Diagonizable(content) {\r\n        return fetch(`https://easy-algebra-backend.onrender.com/Diagonizable`, {\r\n                'method': 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(content)\r\n            })\r\n            .then(response => response.json())\r\n            .catch(error => console.log(error))\r\n    }\r\n    static Convexity(content) {\r\n        return fetch(`https://easy-algebra-backend.onrender.com/Convexity`, {\r\n                'method': 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(content)\r\n            })\r\n            .then(response => response.json())\r\n            .catch(error => console.log(error))\r\n    }\r\n    static Invertibility(content) {\r\n        return fetch(`https://easy-algebra-backend.onrender.com/Invertibility`, {\r\n                'method': 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(content)\r\n            })\r\n            .then(response => response.json())\r\n            .catch(error => console.log(error))\r\n    }\r\n    static Orthogonality(content) {\r\n        return fetch(`https://easy-algebra-backend.onrender.com/Orthogonality`, {\r\n                'method': 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(content)\r\n            })\r\n            .then(response => response.json())\r\n            .catch(error => console.log(error))\r\n    }\r\n    static Independency(content) {\r\n        return fetch(`https://easy-algebra-backend.onrender.com/Independency`, {\r\n                'method': 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(content)\r\n            })\r\n            .then(response => response.json())\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n}"],"mappings":"AAAA,eAAe,MAAMA,eAAe,CAAC;EACjC,OAAOC,YAAYA,CAACC,OAAO,EAAE;IACzB,OAAOC,KAAK,CAAE,wDAAuD,EAAE;MAC/D,QAAQ,EAAE,MAAM;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAChC,CAAC,CAAC,CACDM,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EAC3C;EACA,OAAOG,SAASA,CAACb,OAAO,EAAE;IACtB,OAAOC,KAAK,CAAE,qDAAoD,EAAE;MAC5D,QAAQ,EAAE,MAAM;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAChC,CAAC,CAAC,CACDM,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EAC3C;EACA,OAAOI,aAAaA,CAACd,OAAO,EAAE;IAC1B,OAAOC,KAAK,CAAE,yDAAwD,EAAE;MAChE,QAAQ,EAAE,MAAM;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAChC,CAAC,CAAC,CACDM,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EAC3C;EACA,OAAOK,aAAaA,CAACf,OAAO,EAAE;IAC1B,OAAOC,KAAK,CAAE,yDAAwD,EAAE;MAChE,QAAQ,EAAE,MAAM;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAChC,CAAC,CAAC,CACDM,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EAC3C;EACA,OAAOM,YAAYA,CAAChB,OAAO,EAAE;IACzB,OAAOC,KAAK,CAAE,wDAAuD,EAAE;MAC/D,QAAQ,EAAE,MAAM;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAChC,CAAC,CAAC,CACDM,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EAC3C;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}