{"ast":null,"code":"export default class Matrix_Decomposition {\n  static Eigen_Decomposition(content) {\n    return fetch(`https://easy-algebra-backend.onrender.com/Eigen_Decomposition`, {\n      'method': 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(content)\n    }).then(response => response.json()).catch(error => console.log(error));\n  }\n  static LU(content) {\n    return fetch(`https://easy-algebra-backend.onrender.com/LU`, {\n      'method': 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(content)\n    }).then(response => response.json()).catch(error => console.log(error));\n  }\n  static Cholosky_Decomposition(content) {\n    return fetch(`https://easy-algebra-backend.onrender.com/Cholosky_Decomposition`, {\n      'method': 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(content)\n    }).then(response => response.json()).catch(error => console.log(error));\n  }\n  static QR_Decomposition(content) {\n    return fetch(`https://easy-algebra-backend.onrender.com/QR_Decomposition`, {\n      'method': 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(content)\n    }).then(response => response.json()).catch(error => console.log(error));\n  }\n  static SVD(content) {\n    return fetch(`https://easy-algebra-backend.onrender.com/SVD`, {\n      'method': 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(content)\n    }).then(response => response.json()).catch(error => console.log(error));\n  }\n}","map":{"version":3,"names":["Matrix_Decomposition","Eigen_Decomposition","content","fetch","headers","body","JSON","stringify","then","response","json","catch","error","console","log","LU","Cholosky_Decomposition","QR_Decomposition","SVD"],"sources":["D:/ReactProjects/Hackathon_Project/main/src/sellami_components/api/Matrix_Decomposition.js"],"sourcesContent":["export default class Matrix_Decomposition {\r\n    static Eigen_Decomposition(content) {\r\n        return fetch(`https://easy-algebra-backend.onrender.com/Eigen_Decomposition`, {\r\n                'method': 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(content)\r\n            })\r\n            .then(response => response.json())\r\n            .catch(error => console.log(error))\r\n    }\r\n    static LU(content) {\r\n        return fetch(`https://easy-algebra-backend.onrender.com/LU`, {\r\n                'method': 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(content)\r\n            })\r\n            .then(response => response.json())\r\n            .catch(error => console.log(error))\r\n    }\r\n    static Cholosky_Decomposition(content) {\r\n        return fetch(`https://easy-algebra-backend.onrender.com/Cholosky_Decomposition`, {\r\n                'method': 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(content)\r\n            })\r\n            .then(response => response.json())\r\n            .catch(error => console.log(error))\r\n    }\r\n    static QR_Decomposition(content) {\r\n        return fetch(`https://easy-algebra-backend.onrender.com/QR_Decomposition`, {\r\n                'method': 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(content)\r\n            })\r\n            .then(response => response.json())\r\n            .catch(error => console.log(error))\r\n    }\r\n    static SVD(content) {\r\n        return fetch(`https://easy-algebra-backend.onrender.com/SVD`, {\r\n                'method': 'POST',\r\n                headers: {\r\n                    'Content-Type': 'application/json'\r\n                },\r\n                body: JSON.stringify(content)\r\n            })\r\n            .then(response => response.json())\r\n            .catch(error => console.log(error))\r\n    }\r\n\r\n}"],"mappings":"AAAA,eAAe,MAAMA,oBAAoB,CAAC;EACtC,OAAOC,mBAAmBA,CAACC,OAAO,EAAE;IAChC,OAAOC,KAAK,CAAE,+DAA8D,EAAE;MACtE,QAAQ,EAAE,MAAM;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAChC,CAAC,CAAC,CACDM,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EAC3C;EACA,OAAOG,EAAEA,CAACb,OAAO,EAAE;IACf,OAAOC,KAAK,CAAE,8CAA6C,EAAE;MACrD,QAAQ,EAAE,MAAM;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAChC,CAAC,CAAC,CACDM,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EAC3C;EACA,OAAOI,sBAAsBA,CAACd,OAAO,EAAE;IACnC,OAAOC,KAAK,CAAE,kEAAiE,EAAE;MACzE,QAAQ,EAAE,MAAM;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAChC,CAAC,CAAC,CACDM,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EAC3C;EACA,OAAOK,gBAAgBA,CAACf,OAAO,EAAE;IAC7B,OAAOC,KAAK,CAAE,4DAA2D,EAAE;MACnE,QAAQ,EAAE,MAAM;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAChC,CAAC,CAAC,CACDM,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EAC3C;EACA,OAAOM,GAAGA,CAAChB,OAAO,EAAE;IAChB,OAAOC,KAAK,CAAE,+CAA8C,EAAE;MACtD,QAAQ,EAAE,MAAM;MAChBC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB,CAAC;MACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,OAAO;IAChC,CAAC,CAAC,CACDM,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;EAC3C;AAEJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}